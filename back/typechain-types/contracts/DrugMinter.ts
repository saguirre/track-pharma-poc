/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace DrugMinter {
  export type DrugStruct = {
    tokenId: BigNumberish;
    name: string;
    status: BigNumberish;
    supplyChainStatus: BigNumberish;
    activeIngredients: string[];
    dosageForm: string;
    route: string;
    strength: string;
    owner: string;
  };

  export type DrugStructOutput = [
    BigNumber,
    string,
    number,
    number,
    string[],
    string,
    string,
    string,
    string
  ] & {
    tokenId: BigNumber;
    name: string;
    status: number;
    supplyChainStatus: number;
    activeIngredients: string[];
    dosageForm: string;
    route: string;
    strength: string;
    owner: string;
  };

  export type RoleStruct = { role: BigNumberish; active: boolean };

  export type RoleStructOutput = [number, boolean] & {
    role: number;
    active: boolean;
  };
}

export interface DrugMinterInterface extends utils.Interface {
  functions: {
    "adminUsers(address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approveUser(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "changeDrugStatus(uint256,bool)": FunctionFragment;
    "collectionName()": FunctionFragment;
    "distributers(address)": FunctionFragment;
    "fetchDrugInformation(uint256)": FunctionFragment;
    "fetchDrugs()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getRoles(address)": FunctionFragment;
    "isAddressOwner(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "manufacturers(address)": FunctionFragment;
    "markAsDeliveredToWholesaler(uint256)": FunctionFragment;
    "markAsInDistributerFacility(uint256)": FunctionFragment;
    "markAsInTransitToDistributer(uint256)": FunctionFragment;
    "markAsInTransitToWholesaler(uint256)": FunctionFragment;
    "markAsInWholesalerFacility(uint256)": FunctionFragment;
    "markAsManufactured(uint256)": FunctionFragment;
    "markAsReadyForSale(uint256)": FunctionFragment;
    "markAsSold(uint256)": FunctionFragment;
    "mintProduct(address,string,string[],string,string,string,string)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "registerDistributer(address)": FunctionFragment;
    "registerManufacturer(address)": FunctionFragment;
    "registerRegulatoryAgency(address)": FunctionFragment;
    "registerWholesaler(address)": FunctionFragment;
    "regulatoryAgencies(address)": FunctionFragment;
    "requestApproval(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "wholesalers(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adminUsers"
      | "approve"
      | "approveUser"
      | "balanceOf"
      | "changeDrugStatus"
      | "collectionName"
      | "distributers"
      | "fetchDrugInformation"
      | "fetchDrugs"
      | "getApproved"
      | "getRoles"
      | "isAddressOwner"
      | "isApprovedForAll"
      | "manufacturers"
      | "markAsDeliveredToWholesaler"
      | "markAsInDistributerFacility"
      | "markAsInTransitToDistributer"
      | "markAsInTransitToWholesaler"
      | "markAsInWholesalerFacility"
      | "markAsManufactured"
      | "markAsReadyForSale"
      | "markAsSold"
      | "mintProduct"
      | "name"
      | "ownerOf"
      | "registerDistributer"
      | "registerManufacturer"
      | "registerRegulatoryAgency"
      | "registerWholesaler"
      | "regulatoryAgencies"
      | "requestApproval"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "wholesalers"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "adminUsers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "approveUser", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeDrugStatus",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchDrugInformation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchDrugs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getRoles", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isAddressOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "manufacturers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "markAsDeliveredToWholesaler",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markAsInDistributerFacility",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markAsInTransitToDistributer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markAsInTransitToWholesaler",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markAsInWholesalerFacility",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markAsManufactured",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markAsReadyForSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markAsSold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintProduct",
    values: [string, string, string[], string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDistributer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerManufacturer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRegulatoryAgency",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerWholesaler",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "regulatoryAgencies",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestApproval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "wholesalers", values: [string]): string;

  decodeFunctionResult(functionFragment: "adminUsers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeDrugStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchDrugInformation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fetchDrugs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAddressOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manufacturers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markAsDeliveredToWholesaler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markAsInDistributerFacility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markAsInTransitToDistributer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markAsInTransitToWholesaler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markAsInWholesalerFacility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markAsManufactured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markAsReadyForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markAsSold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDistributer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerManufacturer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRegulatoryAgency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerWholesaler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "regulatoryAgencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wholesalers",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ApprovedUser(address,address,uint256)": EventFragment;
    "DrugApprovalRequested(uint256,address,uint256)": EventFragment;
    "DrugApproved(uint256,address,uint256)": EventFragment;
    "DrugCreated(uint256,address,address,uint8,uint256)": EventFragment;
    "DrugDeclined(uint256,address,uint256)": EventFragment;
    "DrugDeliveredToWholesaler(uint256,address,uint256)": EventFragment;
    "DrugInDistributerFacility(uint256,address,uint256)": EventFragment;
    "DrugInTransitToDistributer(uint256,address,address,uint256)": EventFragment;
    "DrugInTransitToWholesaler(uint256,address,uint256)": EventFragment;
    "DrugInWholesalerFacility(uint256,address,uint256)": EventFragment;
    "DrugManufactured(uint256,address,uint256)": EventFragment;
    "DrugReadyForSale(uint256,address,uint256)": EventFragment;
    "DrugSold(uint256,address,uint256)": EventFragment;
    "RegisteredDistributer(address,address,uint256)": EventFragment;
    "RegisteredManufacturer(address,address,uint256)": EventFragment;
    "RegisteredRegulatoryAgency(address,address,uint256)": EventFragment;
    "RegisteredWholesaler(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovedUser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrugApprovalRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrugApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrugCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrugDeclined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrugDeliveredToWholesaler"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrugInDistributerFacility"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrugInTransitToDistributer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrugInTransitToWholesaler"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrugInWholesalerFacility"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrugManufactured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrugReadyForSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrugSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisteredDistributer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisteredManufacturer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisteredRegulatoryAgency"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisteredWholesaler"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface ApprovedUserEventObject {
  approver: string;
  newApprovedUser: string;
  time: BigNumber;
}
export type ApprovedUserEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovedUserEventObject
>;

export type ApprovedUserEventFilter = TypedEventFilter<ApprovedUserEvent>;

export interface DrugApprovalRequestedEventObject {
  tokenId: BigNumber;
  sender: string;
  time: BigNumber;
}
export type DrugApprovalRequestedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  DrugApprovalRequestedEventObject
>;

export type DrugApprovalRequestedEventFilter =
  TypedEventFilter<DrugApprovalRequestedEvent>;

export interface DrugApprovedEventObject {
  tokenId: BigNumber;
  owner: string;
  time: BigNumber;
}
export type DrugApprovedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  DrugApprovedEventObject
>;

export type DrugApprovedEventFilter = TypedEventFilter<DrugApprovedEvent>;

export interface DrugCreatedEventObject {
  tokenId: BigNumber;
  creator: string;
  recipient: string;
  status: number;
  time: BigNumber;
}
export type DrugCreatedEvent = TypedEvent<
  [BigNumber, string, string, number, BigNumber],
  DrugCreatedEventObject
>;

export type DrugCreatedEventFilter = TypedEventFilter<DrugCreatedEvent>;

export interface DrugDeclinedEventObject {
  tokenId: BigNumber;
  owner: string;
  time: BigNumber;
}
export type DrugDeclinedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  DrugDeclinedEventObject
>;

export type DrugDeclinedEventFilter = TypedEventFilter<DrugDeclinedEvent>;

export interface DrugDeliveredToWholesalerEventObject {
  tokenId: BigNumber;
  distributer: string;
  time: BigNumber;
}
export type DrugDeliveredToWholesalerEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  DrugDeliveredToWholesalerEventObject
>;

export type DrugDeliveredToWholesalerEventFilter =
  TypedEventFilter<DrugDeliveredToWholesalerEvent>;

export interface DrugInDistributerFacilityEventObject {
  tokenId: BigNumber;
  distributer: string;
  time: BigNumber;
}
export type DrugInDistributerFacilityEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  DrugInDistributerFacilityEventObject
>;

export type DrugInDistributerFacilityEventFilter =
  TypedEventFilter<DrugInDistributerFacilityEvent>;

export interface DrugInTransitToDistributerEventObject {
  tokenId: BigNumber;
  manufacturer: string;
  distributer: string;
  time: BigNumber;
}
export type DrugInTransitToDistributerEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  DrugInTransitToDistributerEventObject
>;

export type DrugInTransitToDistributerEventFilter =
  TypedEventFilter<DrugInTransitToDistributerEvent>;

export interface DrugInTransitToWholesalerEventObject {
  tokenId: BigNumber;
  distributer: string;
  time: BigNumber;
}
export type DrugInTransitToWholesalerEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  DrugInTransitToWholesalerEventObject
>;

export type DrugInTransitToWholesalerEventFilter =
  TypedEventFilter<DrugInTransitToWholesalerEvent>;

export interface DrugInWholesalerFacilityEventObject {
  tokenId: BigNumber;
  wholesaler: string;
  time: BigNumber;
}
export type DrugInWholesalerFacilityEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  DrugInWholesalerFacilityEventObject
>;

export type DrugInWholesalerFacilityEventFilter =
  TypedEventFilter<DrugInWholesalerFacilityEvent>;

export interface DrugManufacturedEventObject {
  tokenId: BigNumber;
  manufacturer: string;
  time: BigNumber;
}
export type DrugManufacturedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  DrugManufacturedEventObject
>;

export type DrugManufacturedEventFilter =
  TypedEventFilter<DrugManufacturedEvent>;

export interface DrugReadyForSaleEventObject {
  tokenId: BigNumber;
  wholesaler: string;
  time: BigNumber;
}
export type DrugReadyForSaleEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  DrugReadyForSaleEventObject
>;

export type DrugReadyForSaleEventFilter =
  TypedEventFilter<DrugReadyForSaleEvent>;

export interface DrugSoldEventObject {
  tokenId: BigNumber;
  wholesaler: string;
  time: BigNumber;
}
export type DrugSoldEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  DrugSoldEventObject
>;

export type DrugSoldEventFilter = TypedEventFilter<DrugSoldEvent>;

export interface RegisteredDistributerEventObject {
  registrant: string;
  newDistributer: string;
  time: BigNumber;
}
export type RegisteredDistributerEvent = TypedEvent<
  [string, string, BigNumber],
  RegisteredDistributerEventObject
>;

export type RegisteredDistributerEventFilter =
  TypedEventFilter<RegisteredDistributerEvent>;

export interface RegisteredManufacturerEventObject {
  registrant: string;
  newManufacturer: string;
  time: BigNumber;
}
export type RegisteredManufacturerEvent = TypedEvent<
  [string, string, BigNumber],
  RegisteredManufacturerEventObject
>;

export type RegisteredManufacturerEventFilter =
  TypedEventFilter<RegisteredManufacturerEvent>;

export interface RegisteredRegulatoryAgencyEventObject {
  registrant: string;
  newRegulatoryAgency: string;
  time: BigNumber;
}
export type RegisteredRegulatoryAgencyEvent = TypedEvent<
  [string, string, BigNumber],
  RegisteredRegulatoryAgencyEventObject
>;

export type RegisteredRegulatoryAgencyEventFilter =
  TypedEventFilter<RegisteredRegulatoryAgencyEvent>;

export interface RegisteredWholesalerEventObject {
  registrant: string;
  newWholesaler: string;
  time: BigNumber;
}
export type RegisteredWholesalerEvent = TypedEvent<
  [string, string, BigNumber],
  RegisteredWholesalerEventObject
>;

export type RegisteredWholesalerEventFilter =
  TypedEventFilter<RegisteredWholesalerEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface DrugMinter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DrugMinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adminUsers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveUser(
      userToApprove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    changeDrugStatus(
      tokenId: BigNumberish,
      approve: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectionName(overrides?: CallOverrides): Promise<[string]>;

    distributers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    fetchDrugInformation(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DrugMinter.DrugStructOutput]>;

    fetchDrugs(
      overrides?: CallOverrides
    ): Promise<[DrugMinter.DrugStructOutput[]]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoles(
      account: string,
      overrides?: CallOverrides
    ): Promise<[DrugMinter.RoleStructOutput[]]>;

    isAddressOwner(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    manufacturers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    markAsDeliveredToWholesaler(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    markAsInDistributerFacility(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    markAsInTransitToDistributer(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    markAsInTransitToWholesaler(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    markAsInWholesalerFacility(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    markAsManufactured(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    markAsReadyForSale(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    markAsSold(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintProduct(
      recipient: string,
      name: string,
      activeIngredients: string[],
      dosageForm: string,
      route: string,
      strength: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registerDistributer(
      newDistributer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerManufacturer(
      newManufacturer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerRegulatoryAgency(
      newRegulatoryAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerWholesaler(
      newWholesaler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    regulatoryAgencies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    requestApproval(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wholesalers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  adminUsers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveUser(
    userToApprove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  changeDrugStatus(
    tokenId: BigNumberish,
    approve: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectionName(overrides?: CallOverrides): Promise<string>;

  distributers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  fetchDrugInformation(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DrugMinter.DrugStructOutput>;

  fetchDrugs(overrides?: CallOverrides): Promise<DrugMinter.DrugStructOutput[]>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoles(
    account: string,
    overrides?: CallOverrides
  ): Promise<DrugMinter.RoleStructOutput[]>;

  isAddressOwner(account: string, overrides?: CallOverrides): Promise<boolean>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  manufacturers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  markAsDeliveredToWholesaler(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  markAsInDistributerFacility(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  markAsInTransitToDistributer(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  markAsInTransitToWholesaler(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  markAsInWholesalerFacility(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  markAsManufactured(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  markAsReadyForSale(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  markAsSold(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintProduct(
    recipient: string,
    name: string,
    activeIngredients: string[],
    dosageForm: string,
    route: string,
    strength: string,
    tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  registerDistributer(
    newDistributer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerManufacturer(
    newManufacturer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerRegulatoryAgency(
    newRegulatoryAgency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerWholesaler(
    newWholesaler: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  regulatoryAgencies(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  requestApproval(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wholesalers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    adminUsers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveUser(
      userToApprove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeDrugStatus(
      tokenId: BigNumberish,
      approve: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    collectionName(overrides?: CallOverrides): Promise<string>;

    distributers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    fetchDrugInformation(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DrugMinter.DrugStructOutput>;

    fetchDrugs(
      overrides?: CallOverrides
    ): Promise<DrugMinter.DrugStructOutput[]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoles(
      account: string,
      overrides?: CallOverrides
    ): Promise<DrugMinter.RoleStructOutput[]>;

    isAddressOwner(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    manufacturers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    markAsDeliveredToWholesaler(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    markAsInDistributerFacility(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    markAsInTransitToDistributer(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    markAsInTransitToWholesaler(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    markAsInWholesalerFacility(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    markAsManufactured(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    markAsReadyForSale(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    markAsSold(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    mintProduct(
      recipient: string,
      name: string,
      activeIngredients: string[],
      dosageForm: string,
      route: string,
      strength: string,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    registerDistributer(
      newDistributer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerManufacturer(
      newManufacturer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerRegulatoryAgency(
      newRegulatoryAgency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerWholesaler(
      newWholesaler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    regulatoryAgencies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requestApproval(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wholesalers(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ApprovedUser(address,address,uint256)"(
      approver?: null,
      newApprovedUser?: null,
      time?: null
    ): ApprovedUserEventFilter;
    ApprovedUser(
      approver?: null,
      newApprovedUser?: null,
      time?: null
    ): ApprovedUserEventFilter;

    "DrugApprovalRequested(uint256,address,uint256)"(
      tokenId?: BigNumberish | null,
      sender?: null,
      time?: null
    ): DrugApprovalRequestedEventFilter;
    DrugApprovalRequested(
      tokenId?: BigNumberish | null,
      sender?: null,
      time?: null
    ): DrugApprovalRequestedEventFilter;

    "DrugApproved(uint256,address,uint256)"(
      tokenId?: BigNumberish | null,
      owner?: null,
      time?: null
    ): DrugApprovedEventFilter;
    DrugApproved(
      tokenId?: BigNumberish | null,
      owner?: null,
      time?: null
    ): DrugApprovedEventFilter;

    "DrugCreated(uint256,address,address,uint8,uint256)"(
      tokenId?: BigNumberish | null,
      creator?: null,
      recipient?: null,
      status?: null,
      time?: null
    ): DrugCreatedEventFilter;
    DrugCreated(
      tokenId?: BigNumberish | null,
      creator?: null,
      recipient?: null,
      status?: null,
      time?: null
    ): DrugCreatedEventFilter;

    "DrugDeclined(uint256,address,uint256)"(
      tokenId?: BigNumberish | null,
      owner?: null,
      time?: null
    ): DrugDeclinedEventFilter;
    DrugDeclined(
      tokenId?: BigNumberish | null,
      owner?: null,
      time?: null
    ): DrugDeclinedEventFilter;

    "DrugDeliveredToWholesaler(uint256,address,uint256)"(
      tokenId?: BigNumberish | null,
      distributer?: null,
      time?: null
    ): DrugDeliveredToWholesalerEventFilter;
    DrugDeliveredToWholesaler(
      tokenId?: BigNumberish | null,
      distributer?: null,
      time?: null
    ): DrugDeliveredToWholesalerEventFilter;

    "DrugInDistributerFacility(uint256,address,uint256)"(
      tokenId?: BigNumberish | null,
      distributer?: null,
      time?: null
    ): DrugInDistributerFacilityEventFilter;
    DrugInDistributerFacility(
      tokenId?: BigNumberish | null,
      distributer?: null,
      time?: null
    ): DrugInDistributerFacilityEventFilter;

    "DrugInTransitToDistributer(uint256,address,address,uint256)"(
      tokenId?: BigNumberish | null,
      manufacturer?: null,
      distributer?: null,
      time?: null
    ): DrugInTransitToDistributerEventFilter;
    DrugInTransitToDistributer(
      tokenId?: BigNumberish | null,
      manufacturer?: null,
      distributer?: null,
      time?: null
    ): DrugInTransitToDistributerEventFilter;

    "DrugInTransitToWholesaler(uint256,address,uint256)"(
      tokenId?: BigNumberish | null,
      distributer?: null,
      time?: null
    ): DrugInTransitToWholesalerEventFilter;
    DrugInTransitToWholesaler(
      tokenId?: BigNumberish | null,
      distributer?: null,
      time?: null
    ): DrugInTransitToWholesalerEventFilter;

    "DrugInWholesalerFacility(uint256,address,uint256)"(
      tokenId?: BigNumberish | null,
      wholesaler?: null,
      time?: null
    ): DrugInWholesalerFacilityEventFilter;
    DrugInWholesalerFacility(
      tokenId?: BigNumberish | null,
      wholesaler?: null,
      time?: null
    ): DrugInWholesalerFacilityEventFilter;

    "DrugManufactured(uint256,address,uint256)"(
      tokenId?: BigNumberish | null,
      manufacturer?: null,
      time?: null
    ): DrugManufacturedEventFilter;
    DrugManufactured(
      tokenId?: BigNumberish | null,
      manufacturer?: null,
      time?: null
    ): DrugManufacturedEventFilter;

    "DrugReadyForSale(uint256,address,uint256)"(
      tokenId?: BigNumberish | null,
      wholesaler?: null,
      time?: null
    ): DrugReadyForSaleEventFilter;
    DrugReadyForSale(
      tokenId?: BigNumberish | null,
      wholesaler?: null,
      time?: null
    ): DrugReadyForSaleEventFilter;

    "DrugSold(uint256,address,uint256)"(
      tokenId?: BigNumberish | null,
      wholesaler?: null,
      time?: null
    ): DrugSoldEventFilter;
    DrugSold(
      tokenId?: BigNumberish | null,
      wholesaler?: null,
      time?: null
    ): DrugSoldEventFilter;

    "RegisteredDistributer(address,address,uint256)"(
      registrant?: null,
      newDistributer?: null,
      time?: null
    ): RegisteredDistributerEventFilter;
    RegisteredDistributer(
      registrant?: null,
      newDistributer?: null,
      time?: null
    ): RegisteredDistributerEventFilter;

    "RegisteredManufacturer(address,address,uint256)"(
      registrant?: null,
      newManufacturer?: null,
      time?: null
    ): RegisteredManufacturerEventFilter;
    RegisteredManufacturer(
      registrant?: null,
      newManufacturer?: null,
      time?: null
    ): RegisteredManufacturerEventFilter;

    "RegisteredRegulatoryAgency(address,address,uint256)"(
      registrant?: null,
      newRegulatoryAgency?: null,
      time?: null
    ): RegisteredRegulatoryAgencyEventFilter;
    RegisteredRegulatoryAgency(
      registrant?: null,
      newRegulatoryAgency?: null,
      time?: null
    ): RegisteredRegulatoryAgencyEventFilter;

    "RegisteredWholesaler(address,address,uint256)"(
      registrant?: null,
      newWholesaler?: null,
      time?: null
    ): RegisteredWholesalerEventFilter;
    RegisteredWholesaler(
      registrant?: null,
      newWholesaler?: null,
      time?: null
    ): RegisteredWholesalerEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    adminUsers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveUser(
      userToApprove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeDrugStatus(
      tokenId: BigNumberish,
      approve: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectionName(overrides?: CallOverrides): Promise<BigNumber>;

    distributers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fetchDrugInformation(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchDrugs(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoles(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isAddressOwner(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manufacturers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    markAsDeliveredToWholesaler(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    markAsInDistributerFacility(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    markAsInTransitToDistributer(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    markAsInTransitToWholesaler(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    markAsInWholesalerFacility(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    markAsManufactured(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    markAsReadyForSale(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    markAsSold(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintProduct(
      recipient: string,
      name: string,
      activeIngredients: string[],
      dosageForm: string,
      route: string,
      strength: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerDistributer(
      newDistributer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerManufacturer(
      newManufacturer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerRegulatoryAgency(
      newRegulatoryAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerWholesaler(
      newWholesaler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    regulatoryAgencies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestApproval(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wholesalers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    adminUsers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveUser(
      userToApprove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeDrugStatus(
      tokenId: BigNumberish,
      approve: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectionName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchDrugInformation(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchDrugs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoles(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAddressOwner(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manufacturers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markAsDeliveredToWholesaler(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    markAsInDistributerFacility(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    markAsInTransitToDistributer(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    markAsInTransitToWholesaler(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    markAsInWholesalerFacility(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    markAsManufactured(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    markAsReadyForSale(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    markAsSold(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintProduct(
      recipient: string,
      name: string,
      activeIngredients: string[],
      dosageForm: string,
      route: string,
      strength: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerDistributer(
      newDistributer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerManufacturer(
      newManufacturer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerRegulatoryAgency(
      newRegulatoryAgency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerWholesaler(
      newWholesaler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    regulatoryAgencies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestApproval(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wholesalers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
